<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting-starteds on Skydive Docs</title>
    <link>http://skydive-project.github.io/skydive/getting-started/</link>
    <description>Recent content in Getting-starteds on Skydive Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 May 2016 11:02:01 +0200</lastBuildDate>
    <atom:link href="http://skydive-project.github.io/skydive/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to deploy Skydive with Devstack</title>
      <link>http://skydive-project.github.io/skydive/getting-started/devstack/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>http://skydive-project.github.io/skydive/getting-started/devstack/</guid>
      <description>

&lt;h2 id=&#34;devstack-plugin&#34;&gt;Devstack plugin&lt;/h2&gt;

&lt;p&gt;Skydive provides a DevStack plugin that can be used in order to have
Skydive Agents/Analyzer set up with the proper probes
by DevStack.&lt;/p&gt;

&lt;p&gt;For a single node setup adding the following lines to your local.conf file
should be enough.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;enable_plugin skydive https://github.com/skydive-project/skydive.git

enable_service skydive-agent skydive-analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The plugin accepts the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Address on which skydive analyzer process listens for connections.
# Must be in ip:port format
#SKYDIVE_ANALYZER_LISTEN=

# Inform the agent about the address on which analyzers are listening
# Must be in ip:port format
#SKYDIVE_AGENT_ANALYZERS=

# ip:port address on which skydive agent listens for connections.
#SKYDIVE_AGENT_LISTEN=

# Configure the skydive agent with the etcd server address
# http://IP_ADDRESS:2379
#SKYDIVE_AGENT_ETCD=

# The path for the generated skydive configuration file
#SKYDIVE_CONFIG_FILE=

# List of agent probes to be used by the agent
# Ex: netns netlink ovsdb
#SKYDIVE_AGENT_PROBES=

# Remote port for ovsdb server.
#SKYDIVE_OVSDB_REMOTE_PORT=6640

# Set the default log level, default: INFO
#SKYDIVE_LOGLEVEL=DEBUG
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-classical-two-nodes-deployment&#34;&gt;The classical two nodes deployment&lt;/h2&gt;

&lt;p&gt;Inside the Devstack folder of the Skydive sources there are two local.conf files
that can be used in order to deployment two Devstack with Skydive. The first
file will install a full Devstack with Skydive analyzer and agent. The second
one will install a compute Devstack with only the skydive agent.&lt;/p&gt;

&lt;p&gt;Skydive will be set with the probes for OpenvSwitch and Neutron. It will be set
to use Keystone as authentication mechanism, so the credentials will be the same
than the admin.&lt;/p&gt;

&lt;p&gt;Once you have your environment set up, going to the Analyzer Web Interface
should show similar to the following capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://skydive-project.github.io/skydive/images/devstack-two-nodes.png&#34; alt=&#34;WebUI Capture&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;capture-traffic&#34;&gt;Capture traffic&lt;/h2&gt;

&lt;p&gt;Now we have our two nodes up and running we may want to start capturing
packets. The following command can be used in order to start a capture on all
the &lt;code&gt;br-int&lt;/code&gt; bridges.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export SKYDIVE_USERNAME=admin
$ export SKYDIVE_PASSWORD=password

$ skydive client -c /tmp/skydive.yaml capture create \
  --probepath &amp;quot;*/br-int[Type=ovsbridge]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client -c /tmp/skydive.yaml capture list
{
  &amp;quot;*/br-int[Type=ovsbridge]&amp;quot;: {
    &amp;quot;ProbePath&amp;quot;: &amp;quot;*/br-int[Type=ovsbridge]&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A request on Elasticsearch will give us the traffic captured. Here after a ping
between the qrouter and the qdhcp namespaces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;curl -s http://localhost:9200/_search | jq .hits.hits[0]
{
  &amp;quot;_source&amp;quot;: {
    &amp;quot;IfDstGraphPath&amp;quot;: &amp;quot;devstack-1[Type=host]/qdhcp-cb5e9887-0779-48d1-aac6-b48e4d688056[Type=netns]/tap8ce0a68c-38[Type=internal]&amp;quot;,
    &amp;quot;IfSrcGraphPath&amp;quot;: &amp;quot;devstack-1[Type=host]/qrouter-c616325e-f3d9-497b-adfa-afe06a5a6245[Type=netns]/qr-26fe372c-b6[Type=internal]&amp;quot;,
    &amp;quot;ProbeGraphPath&amp;quot;: &amp;quot;devstack-1[Type=host]/br-int[Type=ovsbridge]&amp;quot;,
    &amp;quot;TrackingID&amp;quot;: &amp;quot;684924892c321f69599f826eb151acb103c4e8a3&amp;quot;,
    &amp;quot;Statistics&amp;quot;: {
      &amp;quot;Endpoints&amp;quot;: [
        {
          &amp;quot;BA&amp;quot;: {
            &amp;quot;Bytes&amp;quot;: 4700,
            &amp;quot;Packets&amp;quot;: 47,
            &amp;quot;Value&amp;quot;: &amp;quot;fa:16:3e:85:ca:e1&amp;quot;
          },
          &amp;quot;AB&amp;quot;: {
            &amp;quot;Bytes&amp;quot;: 4700,
            &amp;quot;Packets&amp;quot;: 47,
            &amp;quot;Value&amp;quot;: &amp;quot;fa:16:3e:9c:49:a5&amp;quot;
          },
          &amp;quot;Type&amp;quot;: &amp;quot;ETHERNET&amp;quot;
        },
        {
          &amp;quot;BA&amp;quot;: {
            &amp;quot;Bytes&amp;quot;: 3948,
            &amp;quot;Packets&amp;quot;: 47,
            &amp;quot;Value&amp;quot;: &amp;quot;10.0.0.2&amp;quot;
          },
          &amp;quot;AB&amp;quot;: {
            &amp;quot;Bytes&amp;quot;: 3948,
            &amp;quot;Packets&amp;quot;: 47,
            &amp;quot;Value&amp;quot;: &amp;quot;10.0.0.1&amp;quot;
          },
          &amp;quot;Type&amp;quot;: &amp;quot;IPV4&amp;quot;
        }
      ],
      &amp;quot;Last&amp;quot;: 1464279198,
      &amp;quot;Start&amp;quot;: 1464279141
    },
    &amp;quot;LayersPath&amp;quot;: &amp;quot;Ethernet/IPv4/ICMPv4/Payload&amp;quot;,
    &amp;quot;UUID&amp;quot;: &amp;quot;a24497056a12484c181585b7a1344b95e3197955&amp;quot;
  },
  &amp;quot;_score&amp;quot;: 1,
  &amp;quot;_id&amp;quot;: &amp;quot;a24497056a12484c181585b7a1344b95e3197955&amp;quot;,
  &amp;quot;_type&amp;quot;: &amp;quot;flow&amp;quot;,
  &amp;quot;_index&amp;quot;: &amp;quot;skydive_v1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy Skydive with Docker</title>
      <link>http://skydive-project.github.io/skydive/getting-started/docker/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>http://skydive-project.github.io/skydive/getting-started/docker/</guid>
      <description>

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;A Docker image is available on the &lt;a href=&#34;https://hub.docker.com/r/skydive/&#34;&gt;Skydive Docker Hub account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start the analyzer :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8082:8082 -p 2379:2379 skydive/skydive analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start the agent :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run --privileged --pid=host --net=host -p 8081:8081 -v /var/run/docker.sock:/var/run/docker.sock skydive/skydive agent
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; can also be used to automatically start
an Elasticsearch container, a Skydive analyzer container and a Skydive agent container. The service
definition is located in the &lt;code&gt;contrib/docker&lt;/code&gt; folder of the Skydive sources.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>http://skydive-project.github.io/skydive/getting-started/install/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>http://skydive-project.github.io/skydive/getting-started/install/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Skydive relies on two main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;skydive agent, has to be started on each node where the topology and flows
informations will be captured&lt;/li&gt;
&lt;li&gt;skydive analyzer, the node collecting data captured by the agents&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go &amp;gt;= 1.5&lt;/li&gt;
&lt;li&gt;Elasticsearch &amp;gt;= 2.0&lt;/li&gt;
&lt;li&gt;libpcap&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;Make sure you have a working Go environment. &lt;a href=&#34;http://golang.org/doc/install.html&#34;&gt;See the install instructions&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mkdir -p $GOPATH/src/github.com/redhat-cip
$ git clone https://github.com/skydive-project/skydive.git $GOPATH/src/github.com/redhat-cip/skydive
$ cd $GOPATH/src/github.com/redhat-cip/skydive
$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;For a single node setup, the configuration file is optional. For a multiple
node setup, the analyzer IP/PORT need to be adapted.&lt;/p&gt;

&lt;p&gt;Processes are bound to 127.0.0.1 by default, you can explicitly change binding
address with &amp;ldquo;listen: 0.0.0.0:port&amp;rdquo; in the proper configuration sections.&lt;/p&gt;

&lt;p&gt;User can add host metadata to specify an extra host information in
&amp;ldquo;agent.metadata&amp;rdquo; configuration section. All the key value pairs given
under this configuration section will be added to host metadata.&lt;/p&gt;

&lt;p&gt;See the full list of configuration parameters in the sample configuration file
&lt;a href=&#34;https://github.com/redhat-cip/skydive/blob/master/etc/skydive.yml.default&#34;&gt;etc/skydive.yml.default&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive agent [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive analyzer [--conf etc/skydive.yml]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Skydive client, API &amp; WebUI</title>
      <link>http://skydive-project.github.io/skydive/getting-started/client/</link>
      <pubDate>Fri, 06 May 2016 11:02:01 +0200</pubDate>
      
      <guid>http://skydive-project.github.io/skydive/getting-started/client/</guid>
      <description>

&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;

&lt;p&gt;Skydive client can be used to interact with Skydive Analyzer and Agents.
Running it without any command will return all the commands available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client

Usage:
  skydive client [command]

Available Commands:
  alert       Manage alerts
  capture     Manage captures

Flags:
  -h, --help[=false]: help for client
      --password=&amp;quot;&amp;quot;: password auth parameter
      --username=&amp;quot;&amp;quot;: username auth parameter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifying the subcommand will give the usage of the subcommand.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If an authentication mechanism is defined in the configuration file the username
and password parameter have to be used for each command. Environment variables
SKYDIVE_USERNAME and SKYDIVE_PASSWORD can be used as default value for the
username/password command line parameters.&lt;/p&gt;

&lt;h2 id=&#34;webui&#34;&gt;WebUI&lt;/h2&gt;

&lt;p&gt;To access to the WebUI of agents or analyzer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;http://&amp;lt;address&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flow-captures&#34;&gt;Flow captures&lt;/h2&gt;

&lt;p&gt;Flow captures can be started from the WebUI or thanks to the Skydive client :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture create --probepath &amp;lt;probe path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The probe path parameter references the interfaces where the flow probe will be
started, so where the capture will be done.&lt;/p&gt;

&lt;p&gt;The format of a probe path follows the links between topology nodes from
a host node to a target node :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;host1[Type=host]/.../node_nameN[Type=node_typeN]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The node name can be the name of :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a host&lt;/li&gt;
&lt;li&gt;an interface&lt;/li&gt;
&lt;li&gt;a namespace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The node types can be :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;host&lt;/li&gt;
&lt;li&gt;netns&lt;/li&gt;
&lt;li&gt;ovsbridge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently target node types supported are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ovsbridge&lt;/li&gt;
&lt;li&gt;veth&lt;/li&gt;
&lt;li&gt;device&lt;/li&gt;
&lt;li&gt;internal&lt;/li&gt;
&lt;li&gt;tun&lt;/li&gt;
&lt;li&gt;bridge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start a capture on the OVS bridge br1 on the host host1 the following probe
path is used :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture create --probepath &amp;quot;host1[Type=host]/br1[Type=ovsbridge]&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A wilcard for the host node can be used in order to start a capture on
all hosts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture create --probepath &amp;quot;*/br1[Type=ovsbridge]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A capture can be defined in advance and will start when a topology node will
match.&lt;/p&gt;

&lt;p&gt;To delete a capture :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ skydive client capture delete &amp;lt;probe path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>http://skydive-project.github.io/skydive/getting-started/</link>
      <pubDate>Wed, 04 May 2016 17:48:22 +0200</pubDate>
      
      <guid>http://skydive-project.github.io/skydive/getting-started/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>